{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../store/fetch';\nimport { AuthContext } from '../../store/auth';\nimport ModalContext from '../../store/modal';\nimport TextArea from '../textarea';\nimport Button from '../button';\nimport Tag from '../tag';\nimport styles from './add-answer.module.css';\n\nconst AddAnswer = ({\n  id,\n  tags,\n  setQuestion\n}) => {\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  const {\n    handleComponentVisible\n  } = useContext(ModalContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      text: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        const {\n          data\n        } = await authAxios.post(`/answer/${id}`, values);\n        setQuestion(data);\n        resetForm({});\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      text: Yup.string().required('Body is missing.').min(30, 'Body must be at least 30 characters.').max(30000, 'Body cannot be longer than 30000 characters.')\n    })\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    className: styles.container,\n    onSubmit: handleSubmit\n  }, __jsx(\"h2\", null, \"Your answer\"), __jsx(TextArea, {\n    name: \"text\",\n    autoComplete: \"off\",\n    value: values.text,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.text && errors.text,\n    errorMessage: errors.text && errors.text,\n    className: styles.textarea\n  }), __jsx(\"p\", {\n    className: styles.status\n  }, status), __jsx(\"div\", {\n    className: styles.button\n  }, __jsx(Button, {\n    type: \"submit\",\n    primary: true,\n    isLoading: loading,\n    disabled: isSubmitting,\n    onClick: () => !isAuthenticated() && handleComponentVisible(true, 'signup')\n  }, \"Post Your Answer\")), __jsx(\"h3\", null, \"Browse other questions tagged \\xA0\", tags.map(tag => __jsx(Tag, {\n    key: tag\n  }, tag)), \"or \\xA0\", __jsx(Link, {\n    href: \"/questions/ask\",\n    as: \"/questions/ask\"\n  }, __jsx(\"a\", null, \"ask your own question.\")))));\n};\n\nexport default AddAnswer;","map":null,"metadata":{},"sourceType":"module"}