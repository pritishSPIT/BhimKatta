{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../util/fetcher';\nimport Layout from '../components/layout';\nimport PageTitle from '../components/page-title';\nimport SearchInput from '../components/search-input';\nimport TagList from '../components/tag-list';\nimport TagItem from '../components/tag-list/tag-item';\nimport { Spinner } from '../components/icons';\n\nfunction TagsPage() {\n  var _useState = useState(null),\n      searchTerm = _useState[0],\n      setSearchTerm = _useState[1];\n\n  var _useState2 = useState(null),\n      tags = _useState2[0],\n      setTags = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(function () {\n    if (searchTerm === null) {\n      var fetchUser = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _yield$publicFetch$ge, data;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return publicFetch.get('/tags');\n\n                case 2:\n                  _yield$publicFetch$ge = _context.sent;\n                  data = _yield$publicFetch$ge.data;\n                  setTags(data);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchUser() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      fetchUser();\n    } else {\n      var delayDebounceFn = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$publicFetch$ge2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setLoading(true);\n                _context2.next = 3;\n                return publicFetch.get(searchTerm ? \"/tags/\".concat(searchTerm) : \"/tags\");\n\n              case 3:\n                _yield$publicFetch$ge2 = _context2.sent;\n                data = _yield$publicFetch$ge2.data;\n                setTags(data);\n                setLoading(false);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 500);\n      return function () {\n        return clearTimeout(delayDebounceFn);\n      };\n    }\n  }, [searchTerm]);\n  return __jsx(Layout, {\n    extra: false\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Tags - BhimKatta\")), __jsx(PageTitle, {\n    title: \"Tags\",\n    borderBottom: false\n  }, \"A tag is a keyword or label that categorizes your question with other, similar questions. Using the right tags makes it easier for others to find and answer your question.\"), __jsx(SearchInput, {\n    placeholder: \"Filter by tag name\",\n    autoFocus: true,\n    isLoading: loading,\n    autoComplete: \"off\",\n    type: \"text\",\n    onChange: function onChange(e) {\n      return setSearchTerm(e.target.value);\n    }\n  }), !tags && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), tags && __jsx(React.Fragment, null, __jsx(TagList, null, tags === null || tags === void 0 ? void 0 : tags.map(function (_ref3) {\n    var count = _ref3.count,\n        _id = _ref3._id;\n    return __jsx(TagItem, {\n      key: _id,\n      count: count\n    }, _id);\n  })), tags.length == 0 && __jsx(\"p\", {\n    className: \"not-found\"\n  }, \"No tags matched your search.\")));\n}\n\nexport default TagsPage;","map":null,"metadata":{},"sourceType":"module"}