{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { AuthContext } from '../../../store/auth';\nimport { FetchContext } from '../../../store/fetch';\nimport ModalContext from '../../../store/modal';\nimport Button from '../../button';\nimport { ArrowUp, ArrowDown } from '../../icons';\nimport styles from './post-vote.module.css';\n\nconst PostVote = ({\n  score,\n  votes,\n  questionId,\n  answerId,\n  setQuestion\n}) => {\n  const {\n    authState,\n    isAuthenticated\n  } = useContext(AuthContext);\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    handleComponentVisible\n  } = useContext(ModalContext);\n\n  const isUpVoted = () => {\n    var _votes$find;\n\n    return ((_votes$find = votes.find(v => {\n      var _authState$userInfo;\n\n      return v.user === ((_authState$userInfo = authState.userInfo) === null || _authState$userInfo === void 0 ? void 0 : _authState$userInfo.id);\n    })) === null || _votes$find === void 0 ? void 0 : _votes$find.vote) === 1;\n  };\n\n  const isDownVoted = () => {\n    var _votes$find2;\n\n    return ((_votes$find2 = votes.find(v => {\n      var _authState$userInfo2;\n\n      return v.user === ((_authState$userInfo2 = authState.userInfo) === null || _authState$userInfo2 === void 0 ? void 0 : _authState$userInfo2.id);\n    })) === null || _votes$find2 === void 0 ? void 0 : _votes$find2.vote) === -1;\n  };\n\n  const upVote = async () => {\n    const {\n      data\n    } = await authAxios.get(`/votes/upvote/${questionId}/${answerId ? answerId : ''}`);\n    setQuestion(data);\n  };\n\n  const downVote = async () => {\n    const {\n      data\n    } = await authAxios.get(`/votes/downvote/${questionId}/${answerId ? answerId : ''}`);\n    setQuestion(data);\n  };\n\n  const unVote = async () => {\n    const {\n      data\n    } = await authAxios.get(`/votes/unvote/${questionId}/${answerId ? answerId : ''}`);\n    setQuestion(data);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.voteCell\n  }, __jsx(Button, {\n    className: styles.voteButton,\n    onClick: () => isAuthenticated() ? isUpVoted() ? unVote() : upVote() : handleComponentVisible(true, 'signup')\n  }, __jsx(ArrowUp, {\n    className: isUpVoted() ? styles.voted : ''\n  })), __jsx(\"div\", {\n    className: styles.score\n  }, score), __jsx(Button, {\n    className: styles.voteButton,\n    onClick: () => isAuthenticated() ? isDownVoted() ? unVote() : downVote() : handleComponentVisible(true, 'signup')\n  }, __jsx(ArrowDown, {\n    className: isDownVoted() ? styles.voted : ''\n  })));\n};\n\nexport default PostVote;","map":null,"metadata":{},"sourceType":"module"}