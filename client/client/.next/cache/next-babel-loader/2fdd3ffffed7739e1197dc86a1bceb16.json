{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { publicFetch } from '../../../util/fetcher';\nimport { AuthContext } from '../../../store/auth';\nimport ModalContext from '../../../store/modal';\nimport FormInput from '../../form-input';\nimport Button from '../../button';\nimport styles from './login-form.module.css';\n\nvar LoginForm = function LoginForm() {\n  var _useContext = useContext(AuthContext),\n      setAuthState = _useContext.setAuthState;\n\n  var _useContext2 = useContext(ModalContext),\n      setIsComponentVisible = _useContext2.setIsComponentVisible;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  return __jsx(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n        var setStatus, resetForm, _yield$publicFetch$po, data, token, expiresAt, userInfo;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setStatus = _ref.setStatus, resetForm = _ref.resetForm;\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return publicFetch.post('authenticate', values);\n\n              case 5:\n                _yield$publicFetch$po = _context.sent;\n                data = _yield$publicFetch$po.data;\n                token = data.token, expiresAt = data.expiresAt, userInfo = data.userInfo;\n                setAuthState({\n                  token: token,\n                  expiresAt: expiresAt,\n                  userInfo: userInfo\n                });\n                resetForm({});\n                setIsComponentVisible(false);\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](2);\n                setStatus(_context.t0.response.data.message);\n\n              case 16:\n                setLoading(false);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 13]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    validationSchema: Yup.object({\n      username: Yup.string().required('Required').max(16, 'Must be at most 16 characters long').matches(/^[a-zA-Z0-9_-]+$/, 'Contains invalid characters'),\n      password: Yup.string().required('Required').min(6, 'Must be at least 6 characters long').max(50, 'Must be at most 50 characters long')\n    })\n  }, function (_ref3) {\n    var values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        status = _ref3.status,\n        handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit,\n        isSubmitting = _ref3.isSubmitting;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      className: styles.form\n    }, __jsx(FormInput, {\n      label: \"Username\",\n      type: \"text\",\n      name: \"username\",\n      autoComplete: \"off\",\n      value: values.username,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.username && errors.username,\n      errorMessage: errors.username && errors.username\n    }), __jsx(FormInput, {\n      label: \"Password\",\n      type: \"password\",\n      name: \"password\",\n      autoComplete: \"off\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.password && errors.password,\n      errorMessage: errors.password && errors.password\n    }), __jsx(\"p\", {\n      className: styles.status\n    }, status), __jsx(Button, {\n      primary: true,\n      full: true,\n      className: styles.submitButton,\n      type: \"submit\",\n      isLoading: loading,\n      disabled: isSubmitting\n    }, \"Log in\"));\n  });\n};\n\nexport default LoginForm;","map":null,"metadata":{},"sourceType":"module"}