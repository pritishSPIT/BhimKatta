{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../util/fetcher';\nimport Layout from '../components/layout';\nimport QuestionWrapper from '../components/question/question-wrapper';\nimport QuestionStats from '../components/question/question-stats';\nimport QuestionSummary from '../components/question/question-summary';\nimport PageTitle from '../components/page-title';\nimport ButtonGroup from '../components/button-group';\nimport { Spinner } from '../components/icons';\n\nvar HomePage = function HomePage() {\n  var router = useRouter();\n\n  var _useState = useState(null),\n      questions = _useState[0],\n      setQuestions = _useState[1];\n\n  var _useState2 = useState('Votes'),\n      sortType = _useState2[0],\n      setSortType = _useState2[1];\n\n  useEffect(function () {\n    var fetchQuestion = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$publicFetch$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return publicFetch.get('/question');\n\n              case 2:\n                _yield$publicFetch$ge = _context.sent;\n                data = _yield$publicFetch$ge.data;\n                setQuestions(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchQuestion() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var fetchQuestionByTag = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$publicFetch$ge2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return publicFetch.get(\"/questions/\".concat(router.query.tag));\n\n              case 2:\n                _yield$publicFetch$ge2 = _context2.sent;\n                data = _yield$publicFetch$ge2.data;\n                setQuestions(data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function fetchQuestionByTag() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n  }, [router.query.tag]);\n\n  var handleSorting = function handleSorting() {\n    switch (sortType) {\n      case 'Votes':\n        return function (a, b) {\n          return b.score - a.score;\n        };\n\n      case 'Views':\n        return function (a, b) {\n          return b.views - a.views;\n        };\n\n      case 'Newest':\n        return function (a, b) {\n          return new Date(b.created) - new Date(a.created);\n        };\n\n      case 'Oldest':\n        return function (a, b) {\n          return new Date(a.created) - new Date(b.created);\n        };\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, router.query.tag ? router.query.tag : 'Questions', \" - Clone of BhimKatta\")), __jsx(PageTitle, {\n    title: router.query.tag ? \"Questions tagged [\".concat(router.query.tag, \"]\") : 'All Questions',\n    button: true,\n    borderBottom: false\n  }), __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Votes', 'Views', 'Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(function (_ref3) {\n    var id = _ref3.id,\n        votes = _ref3.votes,\n        answers = _ref3.answers,\n        views = _ref3.views,\n        title = _ref3.title,\n        text = _ref3.text,\n        tags = _ref3.tags,\n        author = _ref3.author,\n        created = _ref3.created;\n    return __jsx(QuestionWrapper, {\n      key: id\n    }, __jsx(QuestionStats, {\n      voteCount: votes.length,\n      answerCount: answers.length,\n      view: views\n    }), __jsx(QuestionSummary, {\n      id: id,\n      title: title,\n      tags: tags,\n      author: author,\n      createdTime: created\n    }, text));\n  }));\n};\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}