{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../store/fetch';\nimport { AuthContext } from '../../store/auth';\nimport ModalContext from '../../store/modal';\nimport TextArea from '../textarea';\nimport Button from '../button';\nimport Tag from '../tag';\nimport styles from './add-answer.module.css';\n\nvar AddAnswer = function AddAnswer(_ref) {\n  var id = _ref.id,\n      tags = _ref.tags,\n      setQuestion = _ref.setQuestion;\n\n  var _useContext = useContext(FetchContext),\n      authAxios = _useContext.authAxios;\n\n  var _useContext2 = useContext(AuthContext),\n      isAuthenticated = _useContext2.isAuthenticated;\n\n  var _useContext3 = useContext(ModalContext),\n      handleComponentVisible = _useContext3.handleComponentVisible;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  return __jsx(Formik, {\n    initialValues: {\n      text: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setStatus, resetForm, _yield$authAxios$post, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setStatus = _ref2.setStatus, resetForm = _ref2.resetForm;\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return authAxios.post(\"/answer/\".concat(id), values);\n\n              case 5:\n                _yield$authAxios$post = _context.sent;\n                data = _yield$authAxios$post.data;\n                setQuestion(data);\n                resetForm({});\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                setStatus(_context.t0.response.data.message);\n\n              case 14:\n                setLoading(false);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    validationSchema: Yup.object({\n      text: Yup.string().required('Body is missing.').min(30, 'Body must be at least 30 characters.').max(30000, 'Body cannot be longer than 30000 characters.')\n    })\n  }, function (_ref4) {\n    var values = _ref4.values,\n        errors = _ref4.errors,\n        touched = _ref4.touched,\n        status = _ref4.status,\n        handleChange = _ref4.handleChange,\n        handleBlur = _ref4.handleBlur,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting;\n    return __jsx(\"form\", {\n      className: styles.container,\n      onSubmit: handleSubmit\n    }, __jsx(\"h2\", null, \"Your answer\"), __jsx(TextArea, {\n      name: \"text\",\n      autoComplete: \"off\",\n      value: values.text,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.text && errors.text,\n      errorMessage: errors.text && errors.text,\n      className: styles.textarea\n    }), __jsx(\"p\", {\n      className: styles.status\n    }, status), __jsx(\"div\", {\n      className: styles.button\n    }, __jsx(Button, {\n      type: \"submit\",\n      primary: true,\n      isLoading: loading,\n      disabled: isSubmitting,\n      onClick: function onClick() {\n        return !isAuthenticated() && handleComponentVisible(true, 'signup');\n      }\n    }, \"Post Your Answer\")), __jsx(\"h3\", null, \"Browse other questions tagged \\xA0\", tags.map(function (tag) {\n      return __jsx(Tag, {\n        key: tag\n      }, tag);\n    }), \"or \\xA0\", __jsx(Link, {\n      href: \"/questions/ask\",\n      as: \"/questions/ask\"\n    }, __jsx(\"a\", null, \"ask your own question.\"))));\n  });\n};\n\nexport default AddAnswer;","map":null,"metadata":{},"sourceType":"module"}