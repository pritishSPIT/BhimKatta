{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../../store/fetch';\nimport Button from '../../button';\nimport Textarea from '../../textarea';\nimport FormInput from '../../form-input';\nimport TagInput from '../../tag-input';\nimport styles from './question-form.module.css';\n\nvar QuestionForm = function QuestionForm() {\n  var router = useRouter();\n\n  var _useContext = useContext(FetchContext),\n      authAxios = _useContext.authAxios;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  return __jsx(Formik, {\n    initialValues: {\n      title: '',\n      text: '',\n      tags: []\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n        var setStatus, resetForm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setStatus = _ref.setStatus, resetForm = _ref.resetForm;\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return authAxios.post('questions', values);\n\n              case 5:\n                resetForm({});\n                router.push('/');\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                setStatus(_context.t0.response.data.message);\n\n              case 12:\n                setLoading(false);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 9]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    validationSchema: Yup.object({\n      title: Yup.string().required('Title is missing.').max(150, 'Title cannot be longer than 150 characters.').min(15, 'Title must be at least 15 characters.'),\n      text: Yup.string().required('Body is missing.').min(30, 'Body must be at least 30 characters.').max(30000, 'Body cannot be longer than 30000 characters.'),\n      tags: Yup.array().required('Please enter at least one tag.').max(5, 'Please enter no more than 5 tags.').of(Yup.string().max(15, 'Tag cannot be longer than 15 characters. '))\n    })\n  }, function (_ref3) {\n    var values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        status = _ref3.status,\n        handleChange = _ref3.handleChange,\n        setFieldValue = _ref3.setFieldValue,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit,\n        isSubmitting = _ref3.isSubmitting;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"div\", {\n      className: styles.container\n    }, __jsx(FormInput, {\n      label: \"Title\",\n      inputInfo: \"Be specific and imagine you\\u2019re asking a question to another person\",\n      type: \"text\",\n      name: \"title\",\n      autoComplete: \"off\",\n      value: values.title,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.title && errors.title,\n      errorMessage: errors.title && errors.title,\n      placeholder: \"e.g Is there an R function for finding the index of an element in a vendor?\"\n    }), __jsx(Textarea, {\n      label: \"Body\",\n      inputInfo: \"Include all the information someone would need to answer your question\",\n      name: \"text\",\n      autoComplete: \"off\",\n      value: values.text,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.text && errors.text,\n      errorMessage: errors.text && errors.text\n    }), __jsx(TagInput, {\n      label: \"Tags\",\n      inputInfo: \"Add up to 5 tags to describe what your question is about\",\n      type: \"text\",\n      name: \"tags\",\n      value: values.tags,\n      onChange: function onChange(e) {\n        return setFieldValue('tags', e, true);\n      },\n      onBlur: handleBlur,\n      hasError: touched.tags && errors.tags,\n      errorMessage: errors.tags && errors.tags\n    })), __jsx(\"div\", {\n      className: styles.buttonContainer\n    }, __jsx(\"p\", {\n      className: styles.status\n    }, status), __jsx(\"div\", null, __jsx(Button, {\n      type: \"submit\",\n      primary: true,\n      isLoading: loading,\n      disabled: isSubmitting\n    }, \"Review your question\"))));\n  });\n};\n\nexport default QuestionForm;","map":null,"metadata":{},"sourceType":"module"}