{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport PageTitle from '../../components/page-title';\nimport DetailPageContainer from '../../components/detail-page-container';\nimport PostWrapper from '../../components/post/post-wrapper';\nimport PostVote from '../../components/post/post-vote';\nimport PostSummary from '../../components/post/post-summary';\nimport CommentList from '../../components/post/comment-list';\nimport CommentItem from '../../components/post/comment-list/comment-item';\nimport AnswerContainer from '../../components/answer-container';\nimport AddAnswer from '../../components/add-answer';\nimport { Spinner } from '../../components/icons';\n\nconst QuestionDetail = ({\n  questionId,\n  title\n}) => {\n  const {\n    0: question,\n    1: setQuestion\n  } = useState(null);\n  const {\n    0: answerSortType,\n    1: setAnswersSortType\n  } = useState('Votes');\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/question/${questionId}`);\n      setQuestion(data);\n    };\n\n    fetchQuestion();\n  }, []);\n\n  const handleSorting = () => {\n    switch (answerSortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n\n      default:\n        break;\n    }\n  };\n\n  const isClient = false;\n  return __jsx(Layout, {\n    extra: false\n  }, __jsx(Head, null, __jsx(\"title\", null, title), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: isClient && window.location.href\n  })), __jsx(PageTitle, {\n    title: title,\n    button: true\n  }), __jsx(DetailPageContainer, null, !question && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), question && __jsx(React.Fragment, null, __jsx(PostWrapper, {\n    borderBottom: false\n  }, __jsx(PostVote, {\n    score: question.score,\n    votes: question.votes,\n    questionId: questionId,\n    setQuestion: setQuestion\n  }), __jsx(PostSummary, {\n    tags: question.tags,\n    author: question.author,\n    created: question.created,\n    questionId: questionId\n  }, question.text), __jsx(CommentList, {\n    questionId: questionId,\n    setQuestion: setQuestion\n  }, question.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion\n  }, body)))), question.answers.length > 0 && __jsx(AnswerContainer, {\n    answersCount: question.answers.length,\n    answerSortType: answerSortType,\n    setAnswerSortType: setAnswersSortType\n  }, question.answers.sort(handleSorting()).map(answer => __jsx(PostWrapper, {\n    key: answer.id\n  }, __jsx(PostVote, {\n    score: answer.score,\n    votes: answer.votes,\n    answerId: answer.id,\n    questionId: questionId,\n    setQuestion: setQuestion\n  }), __jsx(PostSummary, {\n    author: answer.author,\n    created: answer.created,\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion\n  }, answer.text), __jsx(CommentList, {\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion\n  }, answer.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    answerId: answer.id,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion\n  }, body)))))), __jsx(AddAnswer, {\n    tags: question.tags,\n    id: questionId,\n    setQuestion: setQuestion\n  }))));\n};\n\nexport async function getServerSideProps(context) {\n  const slug = context.params.slug;\n  const questionId = slug.split('-').shift();\n  const title = slug === null || slug === void 0 ? void 0 : slug.substr(slug.indexOf('-') + 1).split('-').join(' ');\n  return {\n    props: {\n      questionId,\n      title\n    }\n  };\n}\nexport default QuestionDetail;","map":null,"metadata":{},"sourceType":"module"}