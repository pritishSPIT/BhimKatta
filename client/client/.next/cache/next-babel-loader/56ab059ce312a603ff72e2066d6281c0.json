{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useContext } from 'react';\nimport Link from 'next/link';\nimport cn from 'classnames';\nimport useComponentVisible from '../../../hooks/useComponentVisible';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport CONST from '../../../constants';\nimport ModalContext from '../../../store/modal';\nimport { AuthContext } from '../../../store/auth';\nimport Button from '../../button';\nimport NavigationDropdown from '../../navigation-dropdown';\nimport { Menu, Close, Logo } from '../../icons';\nimport styles from './header.module.css';\n\nconst Header = (_ref) => {\n  let {\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\"]);\n\n  const {\n    handleComponentVisible\n  } = useContext(ModalContext);\n  const {\n    isAuthenticated,\n    authState,\n    logout\n  } = useContext(AuthContext);\n  const {\n    ref,\n    toggleRef,\n    isComponentVisible,\n    setIsComponentVisible\n  } = useComponentVisible(false);\n  const size = useWindowSize();\n  useEffect(() => {\n    if (size.width > CONST.MOBILE_SIZE) {\n      setIsComponentVisible(false);\n    }\n  }, [size]);\n  return __jsx(\"header\", _extends({\n    className: cn(styles.header, className)\n  }, props), __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(\"div\", {\n    ref: toggleRef,\n    className: styles.menuContainer\n  }, __jsx(Button, {\n    className: styles.menu,\n    onClick: () => setIsComponentVisible(isOpen => !isOpen)\n  }, isComponentVisible ? __jsx(Close, null) : __jsx(Menu, null))), __jsx(Button, {\n    className: styles.logo,\n    href: \"/\"\n  }, __jsx(Logo, null), __jsx(\"p\", null, \"Bhim\", __jsx(\"span\", null, \"Katta\"))), __jsx(\"div\", {\n    style: {\n      flex: 1\n    }\n  }), isAuthenticated() ? __jsx(\"div\", {\n    className: styles.userInfo\n  }, __jsx(\"p\", null, \"Welcome\", ' ', __jsx(Link, {\n    href: \"/users/[user]\",\n    as: `/users/${authState.userInfo.username}`\n  }, __jsx(\"a\", null, authState.userInfo.username, \"!\"))), __jsx(\"a\", {\n    onClick: () => logout()\n  }, \"log out\")) : __jsx(React.Fragment, null, __jsx(Button, {\n    className: styles.auth,\n    secondary: true,\n    onClick: () => handleComponentVisible(true, 'login')\n  }, \"Log in\"), __jsx(Button, {\n    className: styles.auth,\n    primary: true,\n    onClick: () => handleComponentVisible(true, 'signup')\n  }, \"Sign up\"))), __jsx(\"div\", {\n    ref: ref\n  }, isComponentVisible && __jsx(NavigationDropdown, null)));\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}