{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../util/fetcher';\nimport Layout from '../components/layout';\nimport PageTitle from '../components/page-title';\nimport SearchInput from '../components/search-input';\nimport TagList from '../components/tag-list';\nimport TagItem from '../components/tag-list/tag-item';\nimport { Spinner } from '../components/icons';\n\nfunction TagsPage() {\n  const {\n    0: searchTerm,\n    1: setSearchTerm\n  } = useState(null);\n  const {\n    0: tags,\n    1: setTags\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (searchTerm === null) {\n      const fetchUser = async () => {\n        const {\n          data\n        } = await publicFetch.get('/tags');\n        setTags(data);\n      };\n\n      fetchUser();\n    } else {\n      const delayDebounceFn = setTimeout(async () => {\n        setLoading(true);\n        const {\n          data\n        } = await publicFetch.get(searchTerm ? `/tags/${searchTerm}` : `/tags`);\n        setTags(data);\n        setLoading(false);\n      }, 500);\n      return () => clearTimeout(delayDebounceFn);\n    }\n  }, [searchTerm]);\n  return __jsx(Layout, {\n    extra: false\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Tags - BhimKatta\")), __jsx(PageTitle, {\n    title: \"Tags\",\n    borderBottom: false\n  }, \"A tag is a keyword or label that categorizes your question with other, similar questions. Using the right tags makes it easier for others to find and answer your question.\"), __jsx(SearchInput, {\n    placeholder: \"Filter by tag name\",\n    autoFocus: true,\n    isLoading: loading,\n    autoComplete: \"off\",\n    type: \"text\",\n    onChange: e => setSearchTerm(e.target.value)\n  }), !tags && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), tags && __jsx(React.Fragment, null, __jsx(TagList, null, tags === null || tags === void 0 ? void 0 : tags.map(({\n    count,\n    _id\n  }) => __jsx(TagItem, {\n    key: _id,\n    count: count\n  }, _id))), tags.length == 0 && __jsx(\"p\", {\n    className: \"not-found\"\n  }, \"No tags matched your search.\")));\n}\n\nexport default TagsPage;","map":null,"metadata":{},"sourceType":"module"}