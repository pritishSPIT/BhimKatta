{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport PageTitle from '../../components/page-title';\nimport DetailPageContainer from '../../components/detail-page-container';\nimport PostWrapper from '../../components/post/post-wrapper';\nimport PostVote from '../../components/post/post-vote';\nimport PostSummary from '../../components/post/post-summary';\nimport CommentList from '../../components/post/comment-list';\nimport CommentItem from '../../components/post/comment-list/comment-item';\nimport AnswerContainer from '../../components/answer-container';\nimport AddAnswer from '../../components/add-answer';\nimport { Spinner } from '../../components/icons';\n\nvar QuestionDetail = function QuestionDetail(_ref) {\n  var questionId = _ref.questionId,\n      title = _ref.title;\n\n  var _useState = useState(null),\n      question = _useState[0],\n      setQuestion = _useState[1];\n\n  var _useState2 = useState('Votes'),\n      answerSortType = _useState2[0],\n      setAnswersSortType = _useState2[1];\n\n  useEffect(function () {\n    var fetchQuestion = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$publicFetch$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return publicFetch.get(\"/question/\".concat(questionId));\n\n              case 2:\n                _yield$publicFetch$ge = _context.sent;\n                data = _yield$publicFetch$ge.data;\n                setQuestion(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchQuestion() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchQuestion();\n  }, []);\n\n  var handleSorting = function handleSorting() {\n    switch (answerSortType) {\n      case 'Votes':\n        return function (a, b) {\n          return b.score - a.score;\n        };\n\n      case 'Newest':\n        return function (a, b) {\n          return new Date(b.created) - new Date(a.created);\n        };\n\n      case 'Oldest':\n        return function (a, b) {\n          return new Date(a.created) - new Date(b.created);\n        };\n\n      default:\n        break;\n    }\n  };\n\n  var isClient = true;\n  return __jsx(Layout, {\n    extra: false\n  }, __jsx(Head, null, __jsx(\"title\", null, title), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: isClient && window.location.href\n  })), __jsx(PageTitle, {\n    title: title,\n    button: true\n  }), __jsx(DetailPageContainer, null, !question && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), question && __jsx(React.Fragment, null, __jsx(PostWrapper, {\n    borderBottom: false\n  }, __jsx(PostVote, {\n    score: question.score,\n    votes: question.votes,\n    questionId: questionId,\n    setQuestion: setQuestion\n  }), __jsx(PostSummary, {\n    tags: question.tags,\n    author: question.author,\n    created: question.created,\n    questionId: questionId\n  }, question.text), __jsx(CommentList, {\n    questionId: questionId,\n    setQuestion: setQuestion\n  }, question.comments.map(function (_ref3) {\n    var id = _ref3.id,\n        author = _ref3.author,\n        created = _ref3.created,\n        body = _ref3.body;\n    return __jsx(CommentItem, {\n      key: id,\n      commentId: id,\n      questionId: questionId,\n      author: author.username,\n      isOwner: author.username === question.author.username,\n      created: created,\n      setQuestion: setQuestion\n    }, body);\n  }))), question.answers.length > 0 && __jsx(AnswerContainer, {\n    answersCount: question.answers.length,\n    answerSortType: answerSortType,\n    setAnswerSortType: setAnswersSortType\n  }, question.answers.sort(handleSorting()).map(function (answer) {\n    return __jsx(PostWrapper, {\n      key: answer.id\n    }, __jsx(PostVote, {\n      score: answer.score,\n      votes: answer.votes,\n      answerId: answer.id,\n      questionId: questionId,\n      setQuestion: setQuestion\n    }), __jsx(PostSummary, {\n      author: answer.author,\n      created: answer.created,\n      questionId: questionId,\n      answerId: answer.id,\n      setQuestion: setQuestion\n    }, answer.text), __jsx(CommentList, {\n      questionId: questionId,\n      answerId: answer.id,\n      setQuestion: setQuestion\n    }, answer.comments.map(function (_ref4) {\n      var id = _ref4.id,\n          author = _ref4.author,\n          created = _ref4.created,\n          body = _ref4.body;\n      return __jsx(CommentItem, {\n        key: id,\n        commentId: id,\n        questionId: questionId,\n        answerId: answer.id,\n        author: author.username,\n        isOwner: author.username === question.author.username,\n        created: created,\n        setQuestion: setQuestion\n      }, body);\n    })));\n  })), __jsx(AddAnswer, {\n    tags: question.tags,\n    id: questionId,\n    setQuestion: setQuestion\n  }))));\n};\n\nexport var __N_SSP = true;\nexport default QuestionDetail;","map":null,"metadata":{},"sourceType":"module"}