{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../../store/fetch';\nimport TextArea from '../../textarea';\nimport Button from '../../button';\nimport styles from './add-comment.module.css';\n\nvar AddComment = function AddComment(_ref) {\n  var questionId = _ref.questionId,\n      answerId = _ref.answerId,\n      setShowAddComment = _ref.setShowAddComment,\n      setQuestion = _ref.setQuestion;\n\n  var _useContext = useContext(FetchContext),\n      authAxios = _useContext.authAxios;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  return __jsx(Formik, {\n    initialValues: {\n      comment: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setStatus, resetForm, _yield$authAxios$post, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setStatus = _ref2.setStatus, resetForm = _ref2.resetForm;\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return authAxios.post(\"/comment/\".concat(questionId, \"/\").concat(answerId ? answerId : ''), values);\n\n              case 5:\n                _yield$authAxios$post = _context.sent;\n                data = _yield$authAxios$post.data;\n                setQuestion(data);\n                resetForm({});\n                setShowAddComment(false);\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n                setStatus(_context.t0.response.data.message);\n\n              case 15:\n                setLoading(false);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    validationSchema: Yup.object({\n      comment: Yup.string().required('Comment is missing.').min(5, 'Comment must be at least 5 characters.').max(1000, 'Comment cannot be longer than 1000 characters.')\n    })\n  }, function (_ref4) {\n    var values = _ref4.values,\n        errors = _ref4.errors,\n        touched = _ref4.touched,\n        status = _ref4.status,\n        handleChange = _ref4.handleChange,\n        handleBlur = _ref4.handleBlur,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting;\n    return __jsx(\"form\", {\n      className: styles.container,\n      onSubmit: handleSubmit\n    }, __jsx(TextArea, {\n      name: \"comment\",\n      autoComplete: \"off\",\n      value: values.comment,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.comment && errors.comment,\n      errorMessage: errors.comment && errors.comment\n    }), __jsx(\"p\", {\n      className: styles.status\n    }, status), __jsx(\"div\", null, __jsx(Button, {\n      className: styles.button,\n      type: \"submit\",\n      primary: true,\n      isLoading: loading,\n      disabled: isSubmitting\n    }, \"Add Comment\")));\n  });\n};\n\nexport default AddComment;","map":null,"metadata":{},"sourceType":"module"}