{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../../store/fetch';\nimport TextArea from '../../textarea';\nimport Button from '../../button';\nimport styles from './add-comment.module.css';\n\nconst AddComment = ({\n  questionId,\n  answerId,\n  setShowAddComment,\n  setQuestion\n}) => {\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      comment: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        const {\n          data\n        } = await authAxios.post(`/comment/${questionId}/${answerId ? answerId : ''}`, values);\n        setQuestion(data);\n        resetForm({});\n        setShowAddComment(false);\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      comment: Yup.string().required('Comment is missing.').min(5, 'Comment must be at least 5 characters.').max(1000, 'Comment cannot be longer than 1000 characters.')\n    })\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    className: styles.container,\n    onSubmit: handleSubmit\n  }, __jsx(TextArea, {\n    name: \"comment\",\n    autoComplete: \"off\",\n    value: values.comment,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.comment && errors.comment,\n    errorMessage: errors.comment && errors.comment\n  }), __jsx(\"p\", {\n    className: styles.status\n  }, status), __jsx(\"div\", null, __jsx(Button, {\n    className: styles.button,\n    type: \"submit\",\n    primary: true,\n    isLoading: loading,\n    disabled: isSubmitting\n  }, \"Add Comment\"))));\n};\n\nexport default AddComment;","map":null,"metadata":{},"sourceType":"module"}